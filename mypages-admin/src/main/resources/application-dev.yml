server:
  port: 8081
spring:
  cloud:
    nacos:
      discovery:
        server-addr: http://192.168.137.151:8848
  datasource:
    url: jdbc:mysql://192.168.137.151:3306/mypages-test?useUnicode=true&characterEncoding=UTF-8&useSSL=false&autoReconnect=true&failOverReadOnly=false&serverTimezone=GMT%2B8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 123456.a
    initialization-mode: always
    continue-on-error: true
    type: com.zaxxer.hikari.HikariDataSource
    #type: com.alibaba.druid.pool.DruidDataSource
    # hikari 连接池配置
    hikari:
      auto-commit: true # 自动提交从池中返回的连接
      minimum-idle: 5 # 最小空闲连接，默认值10，小于0或大于maximum-pool-size，都会重置为maximum-pool-size
      maximum-pool-size: 10 # 最大连接数，小于等于0会被重置为默认值10；大于零小于1会被重置为minimum-idle的值
      idle-timeout: 50000 # 空闲连接超时时间，默认值600000（10分钟），大于等于max-lifetime且max-lifetime>0，会被重置为0；不等于0且小于10秒，会被重置为10秒
      max-lifetime: 60000 # 连接最大存活时间，不等于0且小于30秒，会被重置为默认值30分钟.设置应该比mysql设置的超时时间短
      connection-timeout: 60000 # 连接超时时间：毫秒，小于250毫秒，否则被重置为默认值30秒
      connection-test-query: select 1 # 用于测试连接是否可用的查询语句
      pool-name: HikariPool-admin # 连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置
      read-only: false # 从池中获取的连接是否默认处于只读模式
      # druid 连接池配置
      # Spring Boot 默认是不注入这些属性值的，需要自己绑定
      #druid:
      #initialSize: 5
      #minIdle: 5
      #maxActive: 20
      #maxWait: 60000
      #timeBetweenEvictionRunsMillis: 60000
      #minEvictableIdleTimeMillis: 300000
      #validationQuery: SELECT 1 FROM DUAL
      #testWhileIdle: true
      #testOnBorrow: false
      #testOnReturn: false
      #poolPreparedStatements: true
      # 配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
      # 如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
      # 则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j
      #filters: stat,wall,log4j
      # 指定每个连接上PSCache的大小
      #maxPoolPreparedStatementPerConnectionSize: 20
      # 合并多个DruidDataSource的监控数据
      #useGlobalDataSourceStat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      #connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  redis:
    host: 192.168.137.151
    port: 6379
    username: default
    password: 123456.a
    timeout: 10000 # 连接超时时间（毫秒）
    lettuce:
      shutdown-timeout: 10000 # 默认 100ms
      cluster:
        refresh:
          adaptive: true # 是否允许周期性更新集群拓扑视图，默认 false
          dynamic-refresh-sources: true # 是否允许动态刷新拓扑资源，默认 true
          period: 30 # 更新集群拓扑视图周期，默认 60 秒
  cache: # spirng 缓存管理参数配置
    redis:
      time-to-live: 86400000 # 毫秒，一天 24 * 60 * 60 * 1000
  # rabbitmq 配置
  rabbitmq:
    username: admin
    password: 123456.a
    virtual-host: /
    host: 192.168.137.151
    port: 5672


management: #开启SpringBoot Admin的监控
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
feign:
  okhttp:
    enabled: true
ribbon:
  ConnectTimeout: 3000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 3000 #服务请求处理超时时间（毫秒）


mybatis-plus:
  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:cn/m1yellow/mypages/mapper/xml/*.xml,classpath:cn/m1yellow/mypages/god/mapper/xml/*.xml,classpath:cn/m1yellow/mypages/security/mapper/xml/*.xml
  # 实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: cn.m1yellow.mypages.entity,cn.m1yellow.mypages.god.entity,cn.m1yellow.mypages.security.entity
  global-config:
    banner: false
    # 数据库相关配置
    db-config:
      db-type: mysql
      # 主键类型  AUTO:"数据库ID自增", NONE:"未设置主键", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      # 注意，字段写的是数据库中的字段名称。貌似 boolean 不支持，可以自己实现逻辑删除功能
      logic-delete-field: is_deleted # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)，也就是不用手动加 @TableLogic 注解
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
    # 刷新 mapper，调试神器
    #refresh: true
  # 原生配置
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl


# logback 日志配置
# 日志加载顺序：logback.xml -> application.properties -> logback-spring.xml
# xml 中配置的日志目录，相对路径对直接运行的项目不生效，需要部署后才能生效。IDEA 直接运行使用的是内置代理运行环境，指定的相对路径在内部环境无效
# 【IDEA运行环境】
# path 和 name 同时设置的话，只有name生效，文件位置在项目根目录
# logging.config 加载配置文件，如果外部配置和xml配置同时配置了参数，最终取xml的配置
logging:
  config: classpath:config/logback-spring.xml
  log-path: logs
  log-stash-host: 192.168.137.151:4560


# 【项目文件路径问题】
# https://juejin.cn/post/6844904186690142222
# 使用工程相对路径是靠不住的。本地运行没问题，发布到 Linux 路径不对。
# 使用 CLASSPATH 路径是可靠的。对于程序要读取的文件，尽可能放到 CLASSPATH 下，这样就能保证在开发和发布时候均正常读取。

# 在 project 中，相对路径的根目录是 project 的根文件夹，创建文件的写法是：
# 相对路径：D:\code\River\JavaSE（也就是工程的相对路径），注意路径不能以"/"开头
# File file = new File("javaIO/src/main/java/org/test/stream/a.jpg");
# 绝对路径：
# File file = new File("D:\code\River\JavaSE\javaIO\src\main\java\org\test\stream\a.jpg");

# System.out.println(MyTest.class.getResource("")); // 类所在的具体目录
# System.out.println(MyTest.class.getResource("/")); // 项目 classpath 目录的路径
# System.out.println(this.getClass().getResource(""));
# System.out.println(this.getClass().getResource("/"));

# Class.getClassLoader().getResource(String path)
# 该方法中的参数path不能以“/“开头，path表示的是从classpath下获取资源


# jwt 配置
jwt:
  tokenHeader: Authorization # JWT存储的请求头
  base64Secret: REczZmVGcjdARTZSVGc3IzhSOUo= # JWT加解密使用的密钥
  expiration: 7200 # JWT的超期限时间，单位：秒。(例：60*60*24*7=604800)
  tokenStart: 'Bearer' # JWT负载中拿到开头，getter 方法会添加一个空格


# spring security 不过滤资源路径列表。注意，自定义属性不建议直接放到 spring 的配置下面
# 注意，"/" 加与不加是有区别的，单独匹配的
secure:
  ignored:
    urls:
      - /swagger-ui.html
      - /swagger-resources/**
      - /swagger/**
      - /**/v2/api-docs
      - /webjars/springfox-swagger-ui/**
      - /favicon.ico
      - /**/images/**
      - /**/css/**
      - /**/js/**
      - /druid/**
      - /home
      - /home/
      - /user/login
      - /user/logout
      - /user/register
      - /error


# 项目访问 IP 白名单
project:
  access:
    allow:
      list: 127.0.0.1,localhost,192.168.3.100,192.168.58.1,192.168.137.1,192.168.137.151,8.129.220.131,172.23.199.172,43.129.189.39,172.19.0.7


# 用户头像保存位置
user:
  avatar:
    # 相对项目根目录，本地运行可行，部署 Linux 之后，根目录为 /，导致路径出错
    #savedir: mypages-admin/src/main/resources/public/images/user-profile-photo/
    # target 下的 classes 目录，不区分平台，但本地项目执行 mvn clean 后会被清理
    savedir: public/images/user-profile-photo/


# OSS 相关配置信息，外网访问需要流量费！
aliyun:
  oss:
    # 外网查看、下载会产生流量费用，上传免费。内网都免费。配置内网地址，避免产生流量费用。
    # 内网：oss-cn-shenzhen-internal.aliyuncs.com 外网：oss-cn-shenzhen.aliyuncs.com
    endpoint: oss-cn-shenzhen.aliyuncs.com
    accessKeyId: accessKeyId # 访问身份验证中用到用户标识
    accessKeySecret: accessKeySecret # 用户用于加密签名字符串和oss用来验证签名字符串的密钥
    bucketName: mypages # oss的存储空间
    policy:
      expire: 300 # 签名有效期(S)
    maxSize: 10 # 上传文件大小(M)
    callback: http://localhost:8081/aliyun/oss/callback # 文件上传成功后的回调地址
    dir:
      prefix: images/ # 上传文件夹路径前缀
